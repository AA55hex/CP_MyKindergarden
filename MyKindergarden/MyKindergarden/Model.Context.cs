//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyKindergarden
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyKindergardenEntities : DbContext
    {
        public MyKindergardenEntities()
            : base("name=MyKindergardenEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Child> Children { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientType> ClientTypes { get; set; }
        public virtual DbSet<GroupType> GroupTypes { get; set; }
        public virtual DbSet<KinderGroup> KinderGroups { get; set; }
        public virtual DbSet<VisitDate> VisitDates { get; set; }
        public virtual DbSet<VisitDateSupportTable> VisitDateSupportTables { get; set; }
        public virtual DbSet<VisitNote> VisitNotes { get; set; }
    
        public virtual int Insert_date(Nullable<System.DateTime> d)
        {
            var dParameter = d.HasValue ?
                new ObjectParameter("d", d) :
                new ObjectParameter("d", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_date", dParameter);
        }
    
        public virtual int Insert_dates(Nullable<System.DateTime> d1, Nullable<System.DateTime> d2)
        {
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_dates", d1Parameter, d2Parameter);
        }
    
        public virtual int UpdateVisitNoteDates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVisitNoteDates");
        }
    }
}
